@page "/weather"
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime Js

<PageTitle>Weather</PageTitle>

<Breadcrumb Items="_items" />

<MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Success" Class="add-item-btn pa-2 ma-0 ml-4" OnClick="@AddItem">Add Item</MudButton>
<MudButton StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" Class="remove-item-btn pa-2 ma-0 ml-4" OnClick="@RemoveItem">Remove Item</MudButton>

<MudDataGrid T="WeatherForecast" MultiSelection Items="@_forecasts" SortMode="SortMode.Multiple" Filterable QuickFilter="@QuickFilter"
             EditMode="DataGridEditMode.Form" Hideable RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" 
             SelectedItemsChanged="@SelectedItemsChanged" Class="pa-4 ma-4" Virtualize
             EditTrigger="DataGridEditTrigger.Manual" Loading="_loading" FixedHeader Height="30rem" Elevation="1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Weather</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="WeatherForecast"/>
        <PropertyColumn Property="x => x.Id" Title="Id" Sortable="false" Filterable="false"/>
        <PropertyColumn Property="x => x.Date.ToString(CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern, CultureInfo.CurrentCulture)" 
                        Title="Date" SortBy="@SortBy"/>
        <PropertyColumn Property="x => x.TemperatureC" Title="Temp. (C)"/>
        <PropertyColumn Property="x => x.TemperatureF" Title="Temp. (F)"/>
        <PropertyColumn Property="x => x.Summary" Title="Summary"/>
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="() => EditItem(context.Item)" />
            </CellTemplate>
        </TemplateColumn>   
    </Columns>
    <PagerContent>
        <MudDataGridPager T="WeatherForecast" PageSizeOptions="new[] {10, 25, 50, 100, 500, 1000, 5000}" />
    </PagerContent>
</MudDataGrid>
<MudMenu PositionAtCursor="true" @ref="_contextMenu" id="_contextMenu">
    @* <MudMenuItem Icon="@Icons.Material.Filled.FileCopy" OnClick="@CopyCell"> *@
    @*     Copy cell to Clipboard *@
    @* </MudMenuItem> *@
    <MudMenuItem Icon="@Icons.Material.Filled.ContentCopy" OnClick="@CopyLine">
        Copy line to Clipboard
    </MudMenuItem>
    <MudMenuItem Icon="@Icons.Material.Filled.CopyAll" OnClick="@CopySelected">
        Copy selected lines to Clipboard
    </MudMenuItem>
</MudMenu>

@code {
    private readonly ObservableCollection<WeatherForecast> _forecasts = [];
    private HashSet<WeatherForecast> _selectedItems = [];
    
    private string? _searchString;
    private bool _loading;

    private WeatherForecast? _contextRow;
    private MudMenu _contextMenu = null!;    
    
    // custom sort by name
    private static Func<WeatherForecast, object> SortBy => x => x.Date;

    // quick filter - filter globally across multiple columns with the same input
    private Func<WeatherForecast, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Date.ToString(CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern, CultureInfo.CurrentCulture).Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.TemperatureC.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.TemperatureF.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return x.Summary != null && x.Summary.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    };

    protected override async Task OnInitializedAsync()
    {
        _loading = true;

        await Task.Yield();
        
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(2000);

        var startDate = DateTime.Now;
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };

        for (var i = 1; i <= 69420; i++)
        {
            _forecasts.Add(new WeatherForecast
            {
                Id = Guid.NewGuid(),
                Date = startDate.AddDays(i),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            });
        }
        
        _loading = false;
    }

    // events
    void RowClicked(DataGridRowClickEventArgs<WeatherForecast> args)
    {
        // you can handle single row click events here if needed
    }

    async Task RowRightClicked(DataGridRowClickEventArgs<WeatherForecast> args)
    {
        _contextRow = args.Item;
        await _contextMenu.OpenMenuAsync(args.MouseEventArgs);
    }

    void SelectedItemsChanged(HashSet<WeatherForecast> items)
    {
        _selectedItems = items;
    }
    
    // private async Task CopyCell()
    // {
    //     if (_contextRow is null) return;
    //     
    //     // For the demo, we copy the 'Summary' property of the selected cell.
    //     var cellContent = _contextRow.Summary ?? string.Empty;
    //     await Js.InvokeVoidAsync("navigator.clipboard.writeText", cellContent);
    //     
    //     Snackbar.Clear();
    //     Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
    //     Snackbar.Add("Cell copied to Clipboard.", Severity.Success, c => c.SnackbarVariant = Variant.Outlined);
    // }    
    
    private async Task CopyLine()
    {
        if (_contextRow is null) return;
        
        // Create a string with all properties of the current row separated by semicolons.
        var lineContent = $"{_contextRow.Id};{_contextRow.Date.ToShortDateString()};{_contextRow.TemperatureC};{_contextRow.TemperatureF};{_contextRow.Summary}";
        await Js.InvokeVoidAsync("navigator.clipboard.writeText", lineContent);
        
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
        Snackbar.Add("Line copied to Clipboard.", Severity.Success, c => c.SnackbarVariant = Variant.Outlined);
    }        
    
    private async Task CopySelected()
    {
        if (_contextRow is null || !_selectedItems.Any())
        {
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
            Snackbar.Add("No Selected lines to copy to Clipboard.", Severity.Info, c => c.SnackbarVariant = Variant.Outlined);

            return;
        }
        
        // Copy each selected row as a line with semicolon separated values
        var selectedLines = _selectedItems.Select(row => 
            $"{row.Id};{row.Date.ToShortDateString()};{row.TemperatureC};{row.TemperatureF};{row.Summary}");
        var allLines = string.Join(Environment.NewLine, selectedLines);
        await Js.InvokeVoidAsync("navigator.clipboard.writeText", allLines);
        
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
        Snackbar.Add("Selected lines copied to Clipboard.", Severity.Success, c => c.SnackbarVariant = Variant.Outlined);
    }        
    
    async Task AddItem()
    {
        var dialog = await DialogService.ShowAsync<AddWeather>("Add Weather", new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true });
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            var item = result.Data.As<WeatherForecast>()!;
            _forecasts.Add(item);
        }        
    }
    
    async Task EditItem(WeatherForecast item)
    {
        var parameters = new DialogParameters<EditWeather> { { x => x.Item, item } };

        var dialog = await DialogService.ShowAsync<EditWeather>("Edit Weather", parameters, new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true });
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            var editedItem = result.Data.As<WeatherForecast>()!;
            var index = _forecasts.IndexOf(item);
            if (index != -1)
            {
                _forecasts[index] = editedItem;
            }
        }
    }

    async Task RemoveItem()
    {
        if (_selectedItems.Any())
        {
            var dialog = await DialogService.ShowAsync<RemoveWeather>("Remove Weather", new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, BackgroundClass = "blurry-dialog" });
            var result = await dialog.Result;

            if (result is { Canceled: false })
            {
                foreach (var item in _selectedItems)
                {
                    _forecasts.Remove(item);
                }
            }
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
            Snackbar.Add("No Items selected to be removed.", Severity.Info, c => c.SnackbarVariant = Variant.Outlined);
        }
    }
    
    private readonly List<BreadcrumbItem> _items =
    [
        new("Home", href: "#", icon: Icons.Material.Filled.Home),
        new("Weather", href: null, disabled: true)
    ];

    public class WeatherForecast
    {
        public Guid Id { get; set; }
        public DateTime Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}