@inject ISnackbar Snackbar

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>    
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1"/>
                Add Weather
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudTextField Label="Weather ID" HelperText="Valid Guid"
                          @bind-Value="model.Id" For="@(() => model.Id)"/>
            <MudTextField Label="Date" Required="true" RequiredError="Date is required!"
                          @bind-Value="model.Date" For="@(() => model.Date)" />
            <MudTextField Label="Temp. (C)" Required="true" RequiredError="Temp. (C) is required!"
                          @bind-Value="model.TemperatureC" For="@(() => model.TemperatureC)" />
            <MudTextField Label="Summary" Required="true" RequiredError="Summary is required!"
                          @bind-Value="model.Summary" For="@(() => model.Summary)" />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Confirm</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }
    
    Weather.WeatherForecast model = new();

    private void Cancel() => MudDialog.Cancel();
    
    private void OnValidSubmit(EditContext context)
    {
        // TODO: Send value to Api.
        
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
        Snackbar.Add("Weather Added Added", Severity.Success, c => c.SnackbarVariant = Variant.Outlined);
        MudDialog.Close(DialogResult.Ok(model));
        
        StateHasChanged();
    }
}