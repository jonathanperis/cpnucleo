@inject ISnackbar Snackbar

<EditForm Model="@Item" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1"/>
                Edit Weather
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudTextField Label="Weather ID" HelperText="Valid Guid" Value="@Item.Id.ToString()" ReadOnly="true"/>
            <MudTextField Label="Date" Required="true" RequiredError="Date is required!" @bind-Value="Item.Date" />
            <MudTextField Label="Temp. (C)" Required="true" RequiredError="Temp. (C) is required!" @bind-Value="Item.TemperatureC" />
            <MudTextField Label="Summary" Required="true" RequiredError="Summary is required!" @bind-Value="Item.Summary" />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Confirm</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public Weather.WeatherForecast Item { get; set; } = new();

    private void Cancel() => MudDialog?.Cancel();

    private void OnValidSubmit(EditContext context)
    {
        // TODO: Send value to Api.
        
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
        Snackbar.Add("Weather Edited Successfully", Severity.Success, c => c.SnackbarVariant = Variant.Outlined);
        MudDialog?.Close(DialogResult.Ok(Item));
    }
}