@inherits LayoutComponentBase
@inject IJSRuntime Js
@implements IBrowserViewportObserver
@implements IAsyncDisposable

<MudThemeProvider @bind-IsDarkMode="@IsDarkMode" Theme="_theme"/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

@if (!_initialized)
{
    <div style="display:none"></div>
}
else
{
    <MudLayout>
        <MudAppBar Dense="true" Elevation="3">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="DrawerToggle"/>
            <MudText Typo="Typo.h6" Class="ml-3">BlazorApp</MudText>
            <MudSpacer/>
            @if (IsSmallScreen)
            {
                <MudToggleIconButton @bind-Toggled="IsDarkMode"
                                     Icon="@Icons.Material.Filled.LightMode"
                                     Color="@Color.Default"
                                     ToggledIcon="@Icons.Material.Filled.DarkMode"
                                     ToggledColor="@Color.Default" />               
            }
            else
            {
                <MudSwitch @bind-Value="IsDarkMode" Color="Color.Secondary" Class="ma-4" T="bool" Label="Toggle Light/Dark Mode" />
            }
            <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" AnchorOrigin="@Origin.BottomRight" AriaLabel="Open user menu">
                <MudMenuItem Label="Preview" Icon="@Icons.Material.Filled.Visibility"/>
                <MudMenuItem Label="Share" Icon="@Icons.Material.Filled.Share"/>
                <MudMenuItem Label="Get Link" Icon="@Icons.Material.Filled.Link"/>
                <MudDivider/>
                <MudMenuItem Label="Remove" Icon="@Icons.Material.Filled.Delete"/>
            </MudMenu>
        </MudAppBar>
        <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always">
            <MudPaper Class="py-3" Elevation="0" Style="background-color: transparent">
                <MudNavMenu>
                    <MudNavLink Href="/#" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
                    <MudDivider/>
                    <MudNavLink Href="/counter" Icon="@Icons.Material.Filled.WatchLater">Counter</MudNavLink>
                    <MudDivider/>
                    <MudNavLink Href="/weather" Icon="@Icons.Material.Filled.Cloud">Weather</MudNavLink>
                    <MudDivider/>                    
                </MudNavMenu>
            </MudPaper>
        </MudDrawer>
        <MudMainContent>
            @Body
        </MudMainContent>
    </MudLayout>
}

@code {
    [Inject]
    private IBrowserViewportService? BrowserViewportService { get; set; }
    
    private readonly MudTheme _theme = new();
    Guid IBrowserViewportObserver.Id { get; } = Guid.NewGuid();

    // Backing fields for persisted properties.
    private bool _isDarkMode;
    private bool _drawerOpen;
    private bool _isSmallScreen;
    private bool _initialized;

    // Public property with getter and setter to persist the theme state.
    private bool IsDarkMode 
    { 
        get => _isDarkMode; 
        set
        {
            if (_isDarkMode == value) return;
            
            _isDarkMode = value;
            _ = SaveSettingAsync("isDarkMode", value);
        } 
    }

    // Public property for the drawer state.
    private bool DrawerOpen 
    { 
        get => _drawerOpen; 
        set
        {
            if (_drawerOpen == value) return;
            
            _drawerOpen = value;
            _ = SaveSettingAsync("drawerOpen", value);
        }
    }

    // Public property with getter and setter to persist the rendered state.
    private bool IsSmallScreen 
    { 
        get => _isSmallScreen; 
        set
        {
            if (_isSmallScreen == value) return;
            
            _isSmallScreen = value;
            _ = SaveSettingAsync("isSmallScreen", value);
        } 
    }    
    
    // Called when the drawer toggle button is clicked.
    void DrawerToggle()
    {
        DrawerOpen = !DrawerOpen;
    }

    // Save the given setting in localStorage.
    private async Task SaveSettingAsync(string key, bool value)
    {
        await Js.InvokeVoidAsync("localStorage.setItem", key, value.ToString());
    }

    // On first render, load the values from localStorage.
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var darkModeStr = await Js.InvokeAsync<string>("localStorage.getItem", "isDarkMode");
            if (!string.IsNullOrEmpty(darkModeStr) && bool.TryParse(darkModeStr, out var darkMode))
            {
                _isDarkMode = darkMode;
            }

            var drawerStateStr = await Js.InvokeAsync<string>("localStorage.getItem", "drawerOpen");
            if (!string.IsNullOrEmpty(drawerStateStr) && bool.TryParse(drawerStateStr, out var drawerState))
            {
                _drawerOpen = drawerState;
            }
            
            var smallScreenModeStr = await Js.InvokeAsync<string>("localStorage.getItem", "isSmallScreen");
            if (!string.IsNullOrEmpty(smallScreenModeStr) && bool.TryParse(smallScreenModeStr, out var smallScreenMode))
            {
                _isSmallScreen = smallScreenMode;
            }            

            _initialized = true;
            StateHasChanged();
            
            await BrowserViewportService?.SubscribeAsync(this, fireImmediately: true)!;
        }
        
        await base.OnAfterRenderAsync(firstRender);
    }
    
    public async ValueTask DisposeAsync() => await BrowserViewportService?.UnsubscribeAsync(this)!;
    
    ResizeOptions IBrowserViewportObserver.ResizeOptions { get; } = new()
    {
        ReportRate = 250,
        NotifyOnBreakpointOnly = true
    };   
    
    Task IBrowserViewportObserver.NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs browserViewportEventArgs)
    {
        IsSmallScreen = browserViewportEventArgs.Breakpoint is Breakpoint.Sm or Breakpoint.Xs;

        return InvokeAsync(StateHasChanged);
    }    
}