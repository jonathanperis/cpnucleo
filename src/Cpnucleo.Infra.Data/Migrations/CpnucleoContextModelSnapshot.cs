// <auto-generated />
using System;
using Cpnucleo.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cpnucleo.Infra.Data.Migrations
{
    [DbContext(typeof(CpnucleoContext))]
    partial class CpnucleoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.1");

            modelBuilder.Entity("Cpnucleo.Domain.Entities.Apontamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APT_ID");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("APT_ATIVO");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("datetime")
                        .HasColumnName("APT_DATA_ALTERACAO");

                    b.Property<DateTime?>("DataApontamento")
                        .IsRequired()
                        .HasColumnType("datetime")
                        .HasColumnName("APT_DATA_LANCAMENTO");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime")
                        .HasColumnName("APT_DATA_EXCLUSAO");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("datetime")
                        .HasColumnName("APT_DATA_INCLUSAO");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("APT_DESCRICAO");

                    b.Property<Guid>("IdRecurso")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("REC_ID");

                    b.Property<Guid>("IdTarefa")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TAR_ID");

                    b.Property<int>("QtdHoras")
                        .HasColumnType("int")
                        .HasColumnName("APT_QTD_HORAS");

                    b.HasKey("Id");

                    b.HasIndex("IdTarefa");

                    b.ToTable("CPN_TB_APONTAMENTO", (string)null);
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.Impedimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IMP_ID");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("IMP_ATIVO");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("datetime")
                        .HasColumnName("IMP_DATA_ALTERACAO");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime")
                        .HasColumnName("IMP_DATA_EXCLUSAO");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("datetime")
                        .HasColumnName("IMP_DATA_INCLUSAO");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IMP_NOME");

                    b.HasKey("Id");

                    b.ToTable("CPN_TB_IMPEDIMENTO", (string)null);
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.ImpedimentoTarefa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ITAR_ID");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("ITAR_ATIVO");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("datetime")
                        .HasColumnName("ITAR_DATA_ALTERACAO");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime")
                        .HasColumnName("ITAR_DATA_EXCLUSAO");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("datetime")
                        .HasColumnName("ITAR_DATA_INCLUSAO");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("ITAR_DESCRICAO");

                    b.Property<Guid>("IdImpedimento")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IMP_ID");

                    b.Property<Guid>("IdTarefa")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TAR_ID");

                    b.HasKey("Id");

                    b.HasIndex("IdImpedimento");

                    b.HasIndex("IdTarefa");

                    b.ToTable("CPN_TB_TAREFA_IMPEDIMENTO", (string)null);
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.Projeto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PROJ_ID");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("PROJ_ATIVO");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("datetime")
                        .HasColumnName("PROJ_DATA_ALTERACAO");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime")
                        .HasColumnName("PROJ_DATA_EXCLUSAO");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("datetime")
                        .HasColumnName("PROJ_DATA_INCLUSAO");

                    b.Property<Guid>("IdSistema")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SIS_ID");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PROJ_NOME");

                    b.HasKey("Id");

                    b.HasIndex("IdSistema");

                    b.ToTable("CPN_TB_PROJETO", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ff203e15-8051-4111-8fb4-34aa8eaf72b2"),
                            Ativo = true,
                            DataInclusao = new DateTime(2022, 6, 11, 17, 20, 0, 900, DateTimeKind.Local).AddTicks(7031),
                            IdSistema = new Guid("acc21f00-de8d-49e8-9df1-ea74a0148df2"),
                            Nome = "Projeto de teste"
                        });
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.Recurso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("REC_ID");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("REC_ATIVO");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("datetime")
                        .HasColumnName("REC_DATA_ALTERACAO");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime")
                        .HasColumnName("REC_DATA_EXCLUSAO");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("datetime")
                        .HasColumnName("REC_DATA_INCLUSAO");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("REC_LOGIN");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("REC_NOME");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("REC_SENHA_SALT");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("REC_SENHA");

                    b.HasKey("Id");

                    b.ToTable("CPN_TB_RECURSO", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("78ad39f8-fc09-454f-a777-350a42a36358"),
                            Ativo = true,
                            DataInclusao = new DateTime(2022, 6, 11, 17, 20, 0, 900, DateTimeKind.Local).AddTicks(7055),
                            Login = "usuario.teste",
                            Nome = "Recurso de teste",
                            Salt = "okVTEMBEAbjnjKmD3On1qKwDT0+vfBRAzDM/T7vHqH+gZJxV8/9rRhqiALLlLC7r",
                            Senha = "k8n3YJ7em+uo32BbpRNgjB+kX6uRCJLN7V1L4Q7WwUqDrpz00uCHi+wOLJBZJkOQ"
                        });
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.RecursoProjeto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RPROJ_ID");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("RPROJ_ATIVO");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime")
                        .HasColumnName("RPROJ_DATA_EXCLUSAO");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("datetime")
                        .HasColumnName("RPROJ_DATA_INCLUSAO");

                    b.Property<Guid>("IdProjeto")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PROJ_ID");

                    b.Property<Guid>("IdRecurso")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("REC_ID");

                    b.HasKey("Id");

                    b.HasIndex("IdProjeto");

                    b.HasIndex("IdRecurso");

                    b.ToTable("CPN_TB_RECURSO_PROJETO", (string)null);
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.RecursoTarefa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RTAR_ID");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("RTAR_ATIVO");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("datetime")
                        .HasColumnName("RTAR_DATA_ALTERACAO");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime")
                        .HasColumnName("RTAR_DATA_EXCLUSAO");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("datetime")
                        .HasColumnName("RTAR_DATA_INCLUSAO");

                    b.Property<Guid>("IdRecurso")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("REC_ID");

                    b.Property<Guid>("IdTarefa")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TAR_ID");

                    b.Property<int>("PercentualTarefa")
                        .HasColumnType("int")
                        .HasColumnName("RTAR_PERCENTUAL");

                    b.HasKey("Id");

                    b.HasIndex("IdRecurso");

                    b.HasIndex("IdTarefa");

                    b.ToTable("CPN_TB_RECURSO_TAREFA", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8681c7e9-fd44-47f2-8d93-79c35fef9137"),
                            Ativo = true,
                            DataInclusao = new DateTime(2022, 6, 11, 17, 20, 0, 900, DateTimeKind.Local).AddTicks(7084),
                            IdRecurso = new Guid("78ad39f8-fc09-454f-a777-350a42a36358"),
                            IdTarefa = new Guid("c9c037ab-0dc5-4c0d-8b0e-9ae0a7b718fb"),
                            PercentualTarefa = 25
                        });
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.Sistema", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SIS_ID");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("SIS_ATIVO");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("datetime")
                        .HasColumnName("SIS_DATA_ALTERACAO");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime")
                        .HasColumnName("SIS_DATA_EXCLUSAO");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("datetime")
                        .HasColumnName("SIS_DATA_INCLUSAO");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("SIS_DESCRICAO");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SIS_NOME");

                    b.HasKey("Id");

                    b.ToTable("CPN_TB_SISTEMA", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("acc21f00-de8d-49e8-9df1-ea74a0148df2"),
                            Ativo = true,
                            DataInclusao = new DateTime(2022, 6, 11, 17, 20, 0, 900, DateTimeKind.Local).AddTicks(7011),
                            Descricao = "Descrição do sistema de teste",
                            Nome = "Sistema de teste"
                        });
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.Tarefa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TAR_ID");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("TAR_ATIVO");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("datetime")
                        .HasColumnName("TAR_DATA_ALTERACAO");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime")
                        .HasColumnName("TAR_DATA_EXCLUSAO");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("datetime")
                        .HasColumnName("TAR_DATA_INCLUSAO");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime")
                        .HasColumnName("TAR_DATA_INICIO");

                    b.Property<DateTime>("DataTermino")
                        .HasColumnType("datetime")
                        .HasColumnName("TAR_DATA_TERMINO");

                    b.Property<string>("Detalhe")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("TAR_DETALHE");

                    b.Property<Guid>("IdProjeto")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PROJ_ID");

                    b.Property<Guid>("IdRecurso")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("REC_ID");

                    b.Property<Guid>("IdTipoTarefa")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TIP_ID");

                    b.Property<Guid>("IdWorkflow")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("WOR_ID");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("TAR_NOME");

                    b.Property<int>("QtdHoras")
                        .HasColumnType("int")
                        .HasColumnName("TAR_QTD_HORAS");

                    b.HasKey("Id");

                    b.HasIndex("IdProjeto");

                    b.HasIndex("IdRecurso");

                    b.HasIndex("IdTipoTarefa");

                    b.HasIndex("IdWorkflow");

                    b.ToTable("CPN_TB_TAREFA", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9c037ab-0dc5-4c0d-8b0e-9ae0a7b718fb"),
                            Ativo = true,
                            DataInclusao = new DateTime(2022, 6, 11, 17, 20, 0, 900, DateTimeKind.Local).AddTicks(7080),
                            DataInicio = new DateTime(2022, 6, 11, 17, 20, 0, 900, DateTimeKind.Local).AddTicks(7066),
                            DataTermino = new DateTime(2022, 6, 16, 17, 20, 0, 900, DateTimeKind.Local).AddTicks(7066),
                            IdProjeto = new Guid("ff203e15-8051-4111-8fb4-34aa8eaf72b2"),
                            IdRecurso = new Guid("78ad39f8-fc09-454f-a777-350a42a36358"),
                            IdTipoTarefa = new Guid("bfbfa056-933c-4419-b2d5-101a3e2fdc33"),
                            IdWorkflow = new Guid("ac5e6309-16a7-4e37-9bd0-541d9f3cea0b"),
                            Nome = "Sistema de teste",
                            QtdHoras = 40
                        });
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.TipoTarefa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TIP_ID");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("TIP_ATIVO");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("datetime")
                        .HasColumnName("TIP_DATA_ALTERACAO");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime")
                        .HasColumnName("TIP_DATA_EXCLUSAO");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("datetime")
                        .HasColumnName("TIP_DATA_INCLUSAO");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TIP_IMAGE_CARD");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TIP_NOME");

                    b.HasKey("Id");

                    b.ToTable("CPN_TB_TIPO_TAREFA", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bfbfa056-933c-4419-b2d5-101a3e2fdc33"),
                            Ativo = true,
                            DataInclusao = new DateTime(2022, 6, 11, 17, 20, 0, 900, DateTimeKind.Local).AddTicks(7060),
                            Image = "success.png",
                            Nome = "TipoTarefa de teste"
                        });
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.Workflow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("WOR_ID");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("WOR_ATIVO");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("datetime")
                        .HasColumnName("WOR_DATA_ALTERACAO");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime")
                        .HasColumnName("WOR_DATA_EXCLUSAO");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("datetime")
                        .HasColumnName("WOR_DATA_INCLUSAO");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("WOR_NOME");

                    b.Property<int>("Ordem")
                        .HasColumnType("int")
                        .HasColumnName("WOR_ORDEM");

                    b.HasKey("Id");

                    b.ToTable("CPN_TB_WORKFLOW", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ac5e6309-16a7-4e37-9bd0-541d9f3cea0b"),
                            Ativo = true,
                            DataInclusao = new DateTime(2022, 6, 11, 17, 20, 0, 900, DateTimeKind.Local).AddTicks(7038),
                            Nome = "Análise",
                            Ordem = 1
                        },
                        new
                        {
                            Id = new Guid("8be601ef-8c1c-40b2-8d99-cdf3594d4a70"),
                            Ativo = true,
                            DataInclusao = new DateTime(2022, 6, 11, 17, 20, 0, 900, DateTimeKind.Local).AddTicks(7040),
                            Nome = "Desenvolvimento",
                            Ordem = 2
                        },
                        new
                        {
                            Id = new Guid("e395dd77-4733-462a-a5fb-346a86ed5127"),
                            Ativo = true,
                            DataInclusao = new DateTime(2022, 6, 11, 17, 20, 0, 900, DateTimeKind.Local).AddTicks(7041),
                            Nome = "Teste",
                            Ordem = 3
                        },
                        new
                        {
                            Id = new Guid("4896727a-1768-4f4a-98a0-802589f055cc"),
                            Ativo = true,
                            DataInclusao = new DateTime(2022, 6, 11, 17, 20, 0, 900, DateTimeKind.Local).AddTicks(7042),
                            Nome = "Finalizado",
                            Ordem = 4
                        });
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.Apontamento", b =>
                {
                    b.HasOne("Cpnucleo.Domain.Entities.Tarefa", "Tarefa")
                        .WithMany()
                        .HasForeignKey("IdTarefa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tarefa");
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.ImpedimentoTarefa", b =>
                {
                    b.HasOne("Cpnucleo.Domain.Entities.Impedimento", "Impedimento")
                        .WithMany()
                        .HasForeignKey("IdImpedimento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cpnucleo.Domain.Entities.Tarefa", "Tarefa")
                        .WithMany()
                        .HasForeignKey("IdTarefa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Impedimento");

                    b.Navigation("Tarefa");
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.Projeto", b =>
                {
                    b.HasOne("Cpnucleo.Domain.Entities.Sistema", "Sistema")
                        .WithMany()
                        .HasForeignKey("IdSistema")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sistema");
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.RecursoProjeto", b =>
                {
                    b.HasOne("Cpnucleo.Domain.Entities.Projeto", "Projeto")
                        .WithMany()
                        .HasForeignKey("IdProjeto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cpnucleo.Domain.Entities.Recurso", "Recurso")
                        .WithMany()
                        .HasForeignKey("IdRecurso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Projeto");

                    b.Navigation("Recurso");
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.RecursoTarefa", b =>
                {
                    b.HasOne("Cpnucleo.Domain.Entities.Recurso", "Recurso")
                        .WithMany()
                        .HasForeignKey("IdRecurso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cpnucleo.Domain.Entities.Tarefa", "Tarefa")
                        .WithMany()
                        .HasForeignKey("IdTarefa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recurso");

                    b.Navigation("Tarefa");
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.Tarefa", b =>
                {
                    b.HasOne("Cpnucleo.Domain.Entities.Projeto", "Projeto")
                        .WithMany()
                        .HasForeignKey("IdProjeto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cpnucleo.Domain.Entities.Recurso", "Recurso")
                        .WithMany()
                        .HasForeignKey("IdRecurso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cpnucleo.Domain.Entities.TipoTarefa", "TipoTarefa")
                        .WithMany()
                        .HasForeignKey("IdTipoTarefa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cpnucleo.Domain.Entities.Workflow", "Workflow")
                        .WithMany()
                        .HasForeignKey("IdWorkflow")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Projeto");

                    b.Navigation("Recurso");

                    b.Navigation("TipoTarefa");

                    b.Navigation("Workflow");
                });
#pragma warning restore 612, 618
        }
    }
}
