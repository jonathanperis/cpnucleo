trigger:
- master
pr:
- master

variables:
  solution: '**/*.sln'
  project: '**/Cpnucleo.API/*.csproj'
  buildConfiguration: 'Release'  

pool:
  vmImage: 'ubuntu-20.04'

name: $(date:yyyyMMdd)$(rev:.r)

steps:

- task: UseDotNet@2
  displayName: Install .NET SDK
  inputs:
    useGlobalJson: true
    includePreviewVersions: true

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: 'restore'
    projects: '$(project)'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: 'build'
    projects: '$(project)'
    arguments: '--configuration $(buildConfiguration)'

- powershell: |
   dotnet tool install --global dotnet-ef --ignore-failed-sources
   dotnet-ef database update --connection "Data Source=Cpnucleo.db"
  workingDirectory: '$(System.DefaultWorkingDirectory)/src/Cpnucleo.Infra.Data/'
  displayName: 'Generate Database Migrations'

- powershell: |
   ls
  workingDirectory: '$(System.DefaultWorkingDirectory)/src/Cpnucleo.Infra.Data/'
  displayName: 'List Files'

# Copy files
# Copy files from a source folder to a target folder using patterns matching file paths (not folder paths)
- task: CopyFiles@2
  inputs:
    #sourceFolder: # Optional
    contents: $(System.DefaultWorkingDirectory)/src/Cpnucleo.Infra.Data/Cpnucleo.db 
    targetFolder: $(build.artifactstagingdirectory)
    #cleanTargetFolder: false # Optional
    #overWrite: false # Optional
    #flattenFolders: false # Optional
    #preserveTimestamp: false # Optional
    #retryCount: 0 # Optional
    #ignoreMakeDirErrors: false # Optional

- powershell: |
   ls
  workingDirectory: $(build.artifactstagingdirectory)
  displayName: 'List Files 2'

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: 'test'
    projects: '**/*.Test/*.csproj'

- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    publishWebProjects: false
    projects: '$(project)'
    arguments: --configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)
    zipAfterPublish: True

- powershell: |
   ls
  workingDirectory: $(build.artifactstagingdirectory)
  displayName: 'List Files 3'

- task: PublishBuildArtifacts@1
  displayName: Publish Artifact
  inputs:
    PathtoPublish: $(build.artifactstagingdirectory)
    TargetPath: '\\my\share\$(Build.DefinitionName)\$(Build.BuildNumber)'