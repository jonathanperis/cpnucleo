@page "/apontamento/listar"
@inject IJSRuntime JS;
@inject ICpnucleoApiClient cpnucleoApiClient;
@inject NavigationManager navigationManager;

<PageTitle>CPN - Apontamentos</PageTitle>

<div class="row">
    <div class="col-lg-12">
        <div class="ibox">
            <div class="ibox-title">
                <h5>Apontamentos (Últimos 30 dias)</h5>
                <div class="ibox-tools">
                    <a class="collapse-link">
                        <i class="fa fa-chevron-up"></i>
                    </a>
                    <a class="fullscreen-link">
                        <i class="fa fa-expand"></i>
                    </a>
                </div>
            </div>
            <div class="ibox-content">
                @if (apontamentos == null)
                {
                    <p><em>Carregando...</em></p>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-bordered table-hover table-datatable">
                            <thead>
                                <tr>
                                    <th><DisplayName For="@(() => model.Id)" /></th>
                                    <th><DisplayName For="@(() => model.Descricao)" /></th>
                                    <th><DisplayName For="@(() => model.Tarefa)" /></th>
                                    <th><DisplayName For="@(() => model.DataApontamento)" /></th>
                                    <th><DisplayName For="@(() => model.QtdHoras)" /></th>
                                    <th><DisplayName For="@(() => model.DataInclusao)" /></th>
                                    @if (apontamentos.Count() > 0)
                                    {
                                        <th class="no-sort"></th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in apontamentos)
                                {
                                    <tr>
                                        <td>@item.Id</td>
                                        <td>@item.Descricao</td>
                                        <td>@item.Tarefa.Nome</td>
                                        <td>@item.DataApontamento.ToString("dd/MM/yyyy")</td>
                                        <td>@item.QtdHoras</td>
                                        <td>@item.DataInclusao.ToString("dd/MM/yyyy")</td>
                                        @if (apontamentos.Count() > 0)
                                        {
                                            <td style="text-align: center">
                                                <a class="btn btn-outline btn-danger btn-xs" role="button" href="/apontamento/remover/@item.Id">Remover</a>
                                            </td>
                                        }
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <th><DisplayName For="@(() => model.Id)" /></th>
                                    <th><DisplayName For="@(() => model.Descricao)" /></th>
                                    <th><DisplayName For="@(() => model.Tarefa)" /></th>
                                    <th><DisplayName For="@(() => model.DataApontamento)" /></th>
                                    <th><DisplayName For="@(() => model.QtdHoras)" /></th>
                                    <th><DisplayName For="@(() => model.DataInclusao)" /></th>
                                    @if (apontamentos.Count() > 0)
                                    {
                                        <th></th>
                                    }
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="row">
    @if (tarefas != null)
    {
        <div class="col-lg-4">
            <div class="ibox">
                <div class="ibox-content">
                    @{
                        var lista = tarefas.Where(x => x.HorasConsumidas == 0);

                        <h3>Novo <span class="badge">@lista.Count()</span></h3>
                        <p class="small"><i class="fa fa-hand-o-up"></i> Clique na tarefa para realizar o apontamento</p>
                        <ul class="sortable-list agile-list ui-sortable">

                            @foreach (var item in lista)
                            {
                                <CardApontamento Tarefa="item" />
                            }

                        </ul>
                    }
                </div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="ibox">
                <div class="ibox-content">
                    @{
                        lista = tarefas.Where(x => x.HorasConsumidas > 0 && x.HorasConsumidas < x.HorasRestantes);

                        <h3>Em Execução <span class="badge">@lista.Count()</span></h3>
                        <p class="small"><i class="fa fa-hand-o-up"></i> Clique na tarefa para realizar o apontamento</p>
                        <ul class="sortable-list agile-list ui-sortable">

                            @foreach (var item in lista)
                            {
                                <CardApontamento Tarefa="item" />
                            }

                        </ul>
                    }
                </div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="ibox">
                <div class="ibox-content">
                    @{
                        lista = tarefas.Where(x => x.HorasConsumidas >= x.HorasRestantes);

                        <h3>Finalizado <span class="badge">@lista.Count()</span></h3>
                        <p class="small"><i class="fa fa-info-circle"></i> Tarefas finalizadas não permitem novos apontamentos</p>
                        <ul class="sortable-list agile-list ui-sortable">

                            @foreach (var item in lista)
                            {
                                <CardApontamentoFinalizado Tarefa="item" />
                            }

                        </ul>
                    }
                </div>
            </div>
        </div>
    }
</div>

<div class="modal inmodal" id="modal-apontamento" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                <i class="fa fa-clock-o modal-icon"></i>
                <h4 class="modal-title">Apontamento de horas</h4>
                <small id="modal-description" class="font-bold"></small>
            </div>
            <EditForm class="form-horizontal" Model="@model" OnValidSubmit="@HandleValidSubmit">
                <input id="modal-id-tarefa" type="hidden" @bind="model.IdTarefa" />
                <input id="modal-id-recurso" type="hidden" @bind="model.IdRecurso" />
                <div class="modal-body">
                    <div class="form-group">
                        <label class="col-sm-4 control-label"><DisplayName For="@(() => model.Descricao)" /></label>
                        <div class="col-sm-8">
                            <input type="text" class="form-control" @bind="model.Descricao" placeholder="Descrição">
                            <ValidationMessage For="@(() => model.Descricao)" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-sm-4 control-label"><DisplayName For="@(() => model.DataApontamento)" /></label>
                        <div class="col-sm-8">
                            <input type="date" class="form-control" @bind="model.DataApontamento" placeholder="Data de Apontamento">
                            <ValidationMessage For="@(() => model.DataApontamento)" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-sm-4 control-label"><DisplayName For="@(() => model.QtdHoras)" /><br><small class="text-navy">Horas</small></label>
                        <div class="col-sm-8">
                            <input type="text" class="form-control" @bind="model.QtdHoras" placeholder="Horas Utilizadas">
                            <ValidationMessage For="@(() => model.DataApontamento)" />
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-white" data-dismiss="modal">Voltar</button>
                    <button type="submit" class="btn btn-primary">Incluir</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private ApontamentoDto model = new ApontamentoDto();
    private IEnumerable<ApontamentoDto> apontamentos;
    private IEnumerable<TarefaDto> tarefas;

    private async Task HandleValidSubmit()
    {
        await cpnucleoApiClient.PostAsync<SistemaDto>("apontamento", "", model);

        model.IdRecurso = new Guid("dcde1113-ab83-489e-ac0c-d7de2caa2279");

        apontamentos = await cpnucleoApiClient.GetAsync<IEnumerable<ApontamentoDto>>("apontamento", "getbyrecurso", "", model.IdRecurso);
        tarefas = await cpnucleoApiClient.GetAsync<IEnumerable<TarefaDto>>("tarefa", "getbyrecurso", "", model.IdRecurso);

        await JS.InvokeVoidAsync("fecharModalApontamento");
    }

    protected override async Task OnInitializedAsync()
    {
        model.IdRecurso = new Guid("dcde1113-ab83-489e-ac0c-d7de2caa2279");

        apontamentos = await cpnucleoApiClient.GetAsync<IEnumerable<ApontamentoDto>>("apontamento", "getbyrecurso", "", model.IdRecurso);
        tarefas = await cpnucleoApiClient.GetAsync<IEnumerable<TarefaDto>>("tarefa", "getbyrecurso", "", model.IdRecurso);

        await JS.InvokeVoidAsync("modalApontamento");
        await JS.InvokeVoidAsync("dataTables", "Apontamentos (Últimos 30 dias)");
    }
}