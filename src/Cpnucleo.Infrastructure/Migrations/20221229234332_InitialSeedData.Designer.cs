// <auto-generated />
using System;
using Cpnucleo.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cpnucleo.Infrastructure.Migrations
{
    [DbContext(typeof(CpnucleoDbContext))]
    [Migration("20221229234332_InitialSeedData")]
    partial class InitialSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cpnucleo.Domain.Entities.Apontamento", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<long>("ClusteredKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ClusteredKey"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataApontamento")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<Guid>("IdRecurso")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdTarefa")
                        .HasColumnType("uuid");

                    b.Property<int>("QtdHoras")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ClusteredKey")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("IdTarefa");

                    b.ToTable("Apontamentos", "public");
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.Impedimento", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<long>("ClusteredKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ClusteredKey"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ClusteredKey")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("Impedimentos", "public");
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.ImpedimentoTarefa", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<long>("ClusteredKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ClusteredKey"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<Guid>("IdImpedimento")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdTarefa")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ClusteredKey")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("IdImpedimento");

                    b.HasIndex("IdTarefa");

                    b.ToTable("ImpedimentosTarefas", "public");
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.Projeto", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<long>("ClusteredKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ClusteredKey"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdSistema")
                        .HasColumnType("uuid");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ClusteredKey")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("IdSistema");

                    b.ToTable("Projetos", "public");

                    b.HasData(
                        new
                        {
                            Id = new Guid("38e2dce9-9f48-486a-88c1-12985c3b72ef"),
                            Ativo = true,
                            ClusteredKey = 0L,
                            DataInclusao = new DateTime(2022, 12, 29, 23, 43, 31, 667, DateTimeKind.Utc).AddTicks(9185),
                            IdSistema = new Guid("b865f5ca-d3c2-46ff-96c8-860207b563c9"),
                            Nome = "Projeto de teste"
                        });
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.Recurso", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<long>("ClusteredKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ClusteredKey"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ClusteredKey")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("Recursos", "public");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae9cab55-01f8-4bd1-8ca0-92f174bb1aa0"),
                            Ativo = true,
                            ClusteredKey = 0L,
                            DataInclusao = new DateTime(2022, 12, 29, 23, 43, 31, 667, DateTimeKind.Utc).AddTicks(9222),
                            Login = "usuario.teste",
                            Nome = "Recurso de teste",
                            Salt = "okVTEMBEAbjnjKmD3On1qKwDT0+vfBRAzDM/T7vHqH+gZJxV8/9rRhqiALLlLC7r",
                            Senha = "k8n3YJ7em+uo32BbpRNgjB+kX6uRCJLN7V1L4Q7WwUqDrpz00uCHi+wOLJBZJkOQ"
                        });
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.RecursoProjeto", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<long>("ClusteredKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ClusteredKey"));

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdProjeto")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdRecurso")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ClusteredKey")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("IdProjeto");

                    b.HasIndex("IdRecurso");

                    b.ToTable("RecursosProjetos", "public");
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.RecursoTarefa", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<long>("ClusteredKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ClusteredKey"));

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdRecurso")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdTarefa")
                        .HasColumnType("uuid");

                    b.Property<int>("PercentualTarefa")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ClusteredKey")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("IdRecurso");

                    b.HasIndex("IdTarefa");

                    b.ToTable("RecursosTarefas", "public");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c38956cb-3f2a-4934-a042-2a8bccdcb2ed"),
                            Ativo = true,
                            ClusteredKey = 0L,
                            DataInclusao = new DateTime(2022, 12, 29, 23, 43, 31, 667, DateTimeKind.Utc).AddTicks(9327),
                            IdRecurso = new Guid("ae9cab55-01f8-4bd1-8ca0-92f174bb1aa0"),
                            IdTarefa = new Guid("82fe661a-620b-40b5-980a-4104b03ce873"),
                            PercentualTarefa = 25
                        });
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.Sistema", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<long>("ClusteredKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ClusteredKey"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ClusteredKey")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("Sistemas", "public");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b865f5ca-d3c2-46ff-96c8-860207b563c9"),
                            Ativo = true,
                            ClusteredKey = 0L,
                            DataInclusao = new DateTime(2022, 12, 29, 23, 43, 31, 667, DateTimeKind.Utc).AddTicks(9117),
                            Descricao = "Descrição do sistema de teste",
                            Nome = "Sistema de teste"
                        });
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.Tarefa", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<long>("ClusteredKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ClusteredKey"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataTermino")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Detalhe")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("IdProjeto")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdRecurso")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdTipoTarefa")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdWorkflow")
                        .HasColumnType("uuid");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<int>("QtdHoras")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ClusteredKey")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("IdProjeto");

                    b.HasIndex("IdRecurso");

                    b.HasIndex("IdTipoTarefa");

                    b.HasIndex("IdWorkflow");

                    b.ToTable("Tarefas", "public");

                    b.HasData(
                        new
                        {
                            Id = new Guid("82fe661a-620b-40b5-980a-4104b03ce873"),
                            Ativo = true,
                            ClusteredKey = 0L,
                            DataInclusao = new DateTime(2022, 12, 29, 23, 43, 31, 667, DateTimeKind.Utc).AddTicks(9315),
                            DataInicio = new DateTime(2022, 12, 29, 23, 43, 31, 667, DateTimeKind.Utc).AddTicks(9278),
                            DataTermino = new DateTime(2023, 1, 3, 23, 43, 31, 667, DateTimeKind.Utc).AddTicks(9279),
                            IdProjeto = new Guid("38e2dce9-9f48-486a-88c1-12985c3b72ef"),
                            IdRecurso = new Guid("ae9cab55-01f8-4bd1-8ca0-92f174bb1aa0"),
                            IdTipoTarefa = new Guid("91d6a672-22dc-4b90-8d7f-0533d2150c44"),
                            IdWorkflow = new Guid("0c17bf58-c14b-44de-8883-e7616bf29134"),
                            Nome = "Sistema de teste",
                            QtdHoras = 40
                        });
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.TipoTarefa", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<long>("ClusteredKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ClusteredKey"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ClusteredKey")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("TiposTarefas", "public");

                    b.HasData(
                        new
                        {
                            Id = new Guid("91d6a672-22dc-4b90-8d7f-0533d2150c44"),
                            Ativo = true,
                            ClusteredKey = 0L,
                            DataInclusao = new DateTime(2022, 12, 29, 23, 43, 31, 667, DateTimeKind.Utc).AddTicks(9232),
                            Image = "success.png",
                            Nome = "TipoTarefa de teste"
                        });
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.Workflow", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<long>("ClusteredKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ClusteredKey"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Ordem")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ClusteredKey")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("Workflows", "public");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c17bf58-c14b-44de-8883-e7616bf29134"),
                            Ativo = true,
                            ClusteredKey = 0L,
                            DataInclusao = new DateTime(2022, 12, 29, 23, 43, 31, 667, DateTimeKind.Utc).AddTicks(9198),
                            Nome = "Análise",
                            Ordem = 1
                        },
                        new
                        {
                            Id = new Guid("4562c0b8-d476-46eb-a58d-1ff3a86266ac"),
                            Ativo = true,
                            ClusteredKey = 0L,
                            DataInclusao = new DateTime(2022, 12, 29, 23, 43, 31, 667, DateTimeKind.Utc).AddTicks(9203),
                            Nome = "Desenvolvimento",
                            Ordem = 2
                        },
                        new
                        {
                            Id = new Guid("bef7c738-0396-4fe0-af66-a4629261fc8e"),
                            Ativo = true,
                            ClusteredKey = 0L,
                            DataInclusao = new DateTime(2022, 12, 29, 23, 43, 31, 667, DateTimeKind.Utc).AddTicks(9205),
                            Nome = "Teste",
                            Ordem = 3
                        },
                        new
                        {
                            Id = new Guid("d3af39ba-e690-47e5-a40d-0d849e07a294"),
                            Ativo = true,
                            ClusteredKey = 0L,
                            DataInclusao = new DateTime(2022, 12, 29, 23, 43, 31, 667, DateTimeKind.Utc).AddTicks(9208),
                            Nome = "Finalizado",
                            Ordem = 4
                        });
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.Apontamento", b =>
                {
                    b.HasOne("Cpnucleo.Domain.Entities.Tarefa", "Tarefa")
                        .WithMany()
                        .HasForeignKey("IdTarefa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tarefa");
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.ImpedimentoTarefa", b =>
                {
                    b.HasOne("Cpnucleo.Domain.Entities.Impedimento", "Impedimento")
                        .WithMany()
                        .HasForeignKey("IdImpedimento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cpnucleo.Domain.Entities.Tarefa", "Tarefa")
                        .WithMany()
                        .HasForeignKey("IdTarefa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Impedimento");

                    b.Navigation("Tarefa");
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.Projeto", b =>
                {
                    b.HasOne("Cpnucleo.Domain.Entities.Sistema", "Sistema")
                        .WithMany()
                        .HasForeignKey("IdSistema")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sistema");
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.RecursoProjeto", b =>
                {
                    b.HasOne("Cpnucleo.Domain.Entities.Projeto", "Projeto")
                        .WithMany()
                        .HasForeignKey("IdProjeto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cpnucleo.Domain.Entities.Recurso", "Recurso")
                        .WithMany()
                        .HasForeignKey("IdRecurso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Projeto");

                    b.Navigation("Recurso");
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.RecursoTarefa", b =>
                {
                    b.HasOne("Cpnucleo.Domain.Entities.Recurso", "Recurso")
                        .WithMany()
                        .HasForeignKey("IdRecurso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cpnucleo.Domain.Entities.Tarefa", "Tarefa")
                        .WithMany()
                        .HasForeignKey("IdTarefa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recurso");

                    b.Navigation("Tarefa");
                });

            modelBuilder.Entity("Cpnucleo.Domain.Entities.Tarefa", b =>
                {
                    b.HasOne("Cpnucleo.Domain.Entities.Projeto", "Projeto")
                        .WithMany()
                        .HasForeignKey("IdProjeto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cpnucleo.Domain.Entities.Recurso", "Recurso")
                        .WithMany()
                        .HasForeignKey("IdRecurso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cpnucleo.Domain.Entities.TipoTarefa", "TipoTarefa")
                        .WithMany()
                        .HasForeignKey("IdTipoTarefa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cpnucleo.Domain.Entities.Workflow", "Workflow")
                        .WithMany()
                        .HasForeignKey("IdWorkflow")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Projeto");

                    b.Navigation("Recurso");

                    b.Navigation("TipoTarefa");

                    b.Navigation("Workflow");
                });
#pragma warning restore 612, 618
        }
    }
}
