name: "cpnucleo-prod"

services:
  webapi1-cpnucleo: &webapi1
    image: jonathanperis/cpnucleo-web-api:latest
    container_name: webapi1-cpnucleo
    depends_on:
      db:
        condition: service_healthy
    environment:
      ConnectionStrings__DefaultConnection: "Host=db;Username=postgres;Password=postgres;Database=cpnucleo;Minimum Pool Size=10;Maximum Pool Size=10;Multiplexing=true"
      ASPNETCORE_ENVIRONMENT: Production
    ports:
      - "5100:8080"
    restart: always

  webapi2-cpnucleo:
    <<: *webapi1
    container_name: webapi2-cpnucleo
    ports:
      - "5111:8080"

  identityapi-cpnucleo:
    image: jonathanperis/cpnucleo-identity-api:latest
    container_name: identityapi-cpnucleo
    depends_on:
      db:
        condition: service_healthy
    environment:
      ConnectionStrings__DefaultConnection: "Host=db;Username=postgres;Password=postgres;Database=cpnucleo;Minimum Pool Size=10;Maximum Pool Size=10;Multiplexing=true"
      ASPNETCORE_ENVIRONMENT: Production
    ports:
      - "5200:5050"
    restart: always

  db:
    image: postgres:16.7
    container_name: db-cpnucleo
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: cpnucleo
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    command: postgres -c checkpoint_timeout=600 -c max_wal_size=4096 -c synchronous_commit=0 -c fsync=0 -c full_page_writes=0
    restart: always

  nginx:
    image: nginx
    container_name: nginx-cpnucleo
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - webapi1-cpnucleo
      - webapi2-cpnucleo
      - identityapi-cpnucleo
    ports:
      - "9999:9999"
    restart: always

volumes:
  db-data:
    driver: local