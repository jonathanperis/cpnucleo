name: Main Check WebClient Build

on:
  pull_request:
    branches:
      - main

env:
  AOT: false
  TRIM: false
  EXTRA_OPTIMIZE: false
  BUILD_CONFIGURATION: Debug   

jobs:
  setup-build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      - name: Restore Dependencies
        working-directory: "./src/WebClient"      
        run: dotnet restore "WebClient.csproj" -p:Configuration=${${{ env.BUILD_CONFIGURATION }}} -p:AOT=${${{ env.AOT }}} -p:Trim=${${{ env.TRIM }}}

      - name: Build Application
        working-directory: "./src/WebClient"      
        run: dotnet build "WebClient.csproj" -c ${{ env.BUILD_CONFIGURATION }} -p:AOT=${${{ env.AOT }}} -p:Trim=${${{ env.TRIM }}} -p:ExtraOptimize=${${{ env.EXTRA_OPTIMIZE }}}

      - name: Unit Tests
        working-directory: "./test/Application.Tests"
        run: dotnet test   
  
      - name: Architecture Tests
        working-directory: "./test/Architecture.Tests"
        run: dotnet test

      - name: Build and Run Docker Compose for Integration Tests
        run: |
          docker compose up db -d --build --force-recreate
          sleep 30        

      - name: Integration Tests
        working-directory: "./test/Integration.Tests"
        run: dotnet test

  # container-test:
  #   needs: setup-build-test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4
  #       with:
  #           fetch-depth: 0

  #     - name: Build and Run Docker Compose for Healthcheck Test
  #       run: |
  #         docker compose up nginx -d --build --force-recreate
  #         sleep 30

  #     - name: Test Healthcheck Endpoint
  #       run: |
  #         for i in {1..20}; do
  #           STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5400/healthz)
  #           echo "Attempt $i: Status $STATUS"            
  #           if [ "$STATUS" -eq 200 ]; then
  #             echo "Healthcheck passed with status $STATUS"
  #             exit 0
  #           else
  #             echo "Healthcheck attempt $i failed with status $STATUS. Retrying in 5 seconds..."
  #             sleep 5
  #           fi
  #         done
  #         echo "Healthcheck failed after 20 attempts."
  #         exit 1