name: Main Release WebApi Pipeline

on:
  push:
    branches:
      - main

env:
  AOT: false
  TRIM: false
  EXTRA_OPTIMIZE: false
  BUILD_CONFIGURATION: Debug  
      
jobs:
  setup-build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      - name: Restore Dependencies
        working-directory: "./src/WebApi"
        run: dotnet restore "WebApi.csproj" -p:Configuration=${${{ env.BUILD_CONFIGURATION }}} -p:AOT=${${{ env.AOT }}} -p:Trim=${${{ env.TRIM }}}

      - name: Build Application
        working-directory: "./src/WebApi"
        run: dotnet build "WebApi.csproj" -c ${{ env.BUILD_CONFIGURATION }} -p:AOT=${${{ env.AOT }}} -p:Trim=${${{ env.TRIM }}} -p:ExtraOptimize=${${{ env.EXTRA_OPTIMIZE }}}

      - name: Unit Tests
        working-directory: "./test/Application.Tests"
        run: dotnet test   
  
      - name: Architecture Tests
        working-directory: "./test/Architecture.Tests"
        run: dotnet test

      - name: Build and Run Docker Compose for Integration Tests
        run: |
          docker compose up db -d
          sleep 30        

      - name: Integration Tests
        working-directory: "./test/Integration.Tests"
        run: dotnet test        

  build-push-image:
    needs: setup-build-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./src/
          file: ./src/WebApi/Dockerfile
          push: true
          tags: jonathanperis/cpnucleo-web-api:latest
          platforms: linux/amd64,linux/arm64/v8          
          build-args: |
            AOT=${{ env.AOT }}
            TRIM=${{ env.TRIM }}
            EXTRA_OPTIMIZE=${{ env.EXTRA_OPTIMIZE }}
            BUILD_CONFIGURATION=${{ env.BUILD_CONFIGURATION }}
          secret-envs	: |
            ConnectionStrings__DefaultConnection=${{ secrets.DB_CONNECTION_STRING }}

  container-test:
    needs: build-push-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Build and Run Docker Compose for Healthcheck Test
        run: |
          docker compose -f compose.prod.yaml up nginx -d
          sleep 30

      - name: Test Healthcheck Endpoint
        run: |
          for i in {1..20}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:9999/healthz)
            echo "Attempt $i: Status $STATUS"
            if [ "$STATUS" -eq 200 ]; then
              echo "Healthcheck passed with status $STATUS"
              exit 0
            else
              echo "Healthcheck attempt $i failed with status $STATUS. Retrying in 5 seconds..."
              sleep 5
            fi
          done
          echo "Healthcheck failed after 20 attempts."
          exit 1

#   deploy-image-azure:
#     runs-on: ubuntu-latest
#     needs: build-push-image
#     # environment:
#     #   name: 'production'
#     #   url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

#     steps:
#       - name: Deploy Image to Azure Web App
#         id: deploy-image-webapp
#         uses: azure/webapps-deploy@v2
#         with:
#             app-name: 'api-cpnucleo'
#             publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE  }}
#             images: 'index.docker.io/jonathanperis/cpnucleo-identity-api:latest'