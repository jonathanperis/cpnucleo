name: "cpnucleo"

services:
  webapi1: &webapi1
    build:
      context: ./src/
      dockerfile: ./WebApi/Dockerfile
      args:
        AOT: false
        TRIM: true
        EXTRA_OPTIMIZE: false
        BUILD_ARCHITECTURE: linux-arm64
        BUILD_CONFIGURATION: Release
    hostname: webapi1
    container_name: webapi-1
    depends_on:
      - db
    restart: always      
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__DefaultConnection: Host=db;Username=postgres;Password=postgres;Database=cpnucleo;Minimum Pool Size=10;Maximum Pool Size=10;Multiplexing=true;
    networks:
      - network-cpnucleo

  webapi2:
    <<: *webapi1
    hostname: webapi2
    container_name: webapi-2

  identityapi:
    build:
      context: ./src/
      dockerfile: ./IdentityApi/Dockerfile
      args:
        AOT: false
        TRIM: true
        EXTRA_OPTIMIZE: false
        BUILD_ARCHITECTURE: linux-arm64
        BUILD_CONFIGURATION: Release
    hostname: identityapi
    container_name: identityapi
    depends_on:
      - db
    restart: always      
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__DefaultConnection: Host=db;Username=postgres;Password=postgres;Database=cpnucleo;Minimum Pool Size=10;Maximum Pool Size=10;Multiplexing=true;
    ports:
      - "9998:5050"
    expose: 
      - 9998      
    networks:
      - network-cpnucleo

  db:
    image: postgres:16.7
    hostname: db
    container_name: db-cpnucleo
    restart: always
    depends_on:
      - postgres-exporter      
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: cpnucleo
    ports:
      - "5432:5432"
    command: postgres -c checkpoint_timeout=600 -c max_wal_size=4096 -c synchronous_commit=0 -c fsync=0 -c full_page_writes=0
    networks:
      - network-cpnucleo

  nginx:
    image: nginx
    hostname: nginx
    container_name: nginx-cpnucleo
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on: 
      - webapi1
      - webapi2
    ports:
      - "9999:9999"
    networks:
      - network-cpnucleo
      
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    hostname: pgsql-exporter
    container_name: postgres-exporter-service
    ports:
      - 9187:9187
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@db:5432/cpnucleo?sslmode=disable"
    networks:
      - network-cpnucleo

  prometheus:
    image: prom/prometheus
    hostname: prometheus
    container_name: prometheus-service
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - "./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
    networks:
      - network-cpnucleo

  grafana:
      image: grafana/grafana-oss
      hostname: grafana
      container_name: grafana-service        
      ports:
        - "3000:3000"
      volumes:
        - "./grafana/config/:/etc/grafana/"
        - "./grafana/dashboards/:/var/lib/grafana/dashboards/"
      depends_on:
        - prometheus
      networks:
      - network-cpnucleo

networks:
  network-cpnucleo:
    driver: bridge

volumes:
  db-data:
    driver: local
  prometheus-data:
    driver: local